### models/lane_net.py
import torch
import torch.nn as nn
import torch.nn.functional as F

class LaneNet(nn.Module):
    def __init__(self):
        super(LaneNet, self).__init__()
        self.batch_norm_in = nn.BatchNorm2d(num_features=3)
        self.conv1 = nn.Conv2d(3, 8, 3)
        self.conv2 = nn.Conv2d(8, 16, 3)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(16, 16, 3)
        self.dropout3 = nn.Dropout2d(0.2)
        self.conv4 = nn.Conv2d(16, 32, 3)
        self.dropout4 = nn.Dropout2d(0.2)
        self.conv5 = nn.Conv2d(32, 32, 3)
        self.dropout5 = nn.Dropout2d(0.2)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.conv6 = nn.Conv2d(32, 64, 3)
        self.dropout6 = nn.Dropout2d(0.2)
        self.conv7 = nn.Conv2d(64, 64, 3)
        self.dropout7 = nn.Dropout2d(0.2)
        self.pool3 = nn.MaxPool2d(2, 2)
        self.up1 = nn.Upsample(scale_factor=2, mode='nearest')
        self.deconv1 = nn.ConvTranspose2d(64, 64, 3)
        self.dropout_d1 = nn.Dropout2d(0.2)
        self.deconv2 = nn.ConvTranspose2d(64, 64, 3)
        self.dropout_d2 = nn.Dropout2d(0.2)
        self.up2 = nn.Upsample(scale_factor=2, mode='nearest')
        self.deconv3 = nn.ConvTranspose2d(64, 32, 3)
        self.dropout_d3 = nn.Dropout2d(0.2)
        self.deconv4 = nn.ConvTranspose2d(32, 32, 3)
        self.dropout_d4 = nn.Dropout2d(0.2)
        self.deconv5 = nn.ConvTranspose2d(32, 16, 3)
        self.dropout_d5 = nn.Dropout2d(0.2)
        self.up3 = nn.Upsample(scale_factor=2, mode='nearest')
        self.deconv6 = nn.ConvTranspose2d(16, 16, 3)
        self.final = nn.ConvTranspose2d(16, 1, 3)

    def forward(self, x):
        x = self.batch_norm_in(x)
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = self.pool1(x)
        x = F.relu(self.conv3(x))
        x = self.dropout3(x)
        x = F.relu(self.conv4(x))
        x = self.dropout4(x)
        x = F.relu(self.conv5(x))
        x = self.dropout5(x)
        x = self.pool2(x)
        x = F.relu(self.conv6(x))
        x = self.dropout6(x)
        x = F.relu(self.conv7(x))
        x = self.dropout7(x)
        x = self.pool3(x)
        x = self.up1(x)
        x = F.relu(self.deconv1(x))
        x = self.dropout_d1(x)
        x = F.relu(self.deconv2(x))
        x = self.dropout_d2(x)
        x = self.up2(x)
        x = F.relu(self.deconv3(x))
        x = self.dropout_d3(x)
        x = F.relu(self.deconv4(x))
        x = self.dropout_d4(x)
        x = F.relu(self.deconv5(x))
        x = self.dropout_d5(x)
        x = self.up3(x)
        x = F.relu(self.deconv6(x))
        x = self.final(x)
        return x